{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Smitha\n",
      "Arjun\n",
      "Atul\n",
      "Vishal\n"
     ]
    }
   ],
   "source": [
    "#Chapter 3 - Try it yourself \n",
    "#3-1 Names\n",
    "names = ['Smitha', 'Arjun', 'Atul', 'Vishal']\n",
    "print(names[0].title())\n",
    "print(names[1])\n",
    "print(names[2])\n",
    "print(names[3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "How are you today, Smitha?\n",
      "How are you today, Arjun?\n",
      "How are you today, Atul?\n",
      "How are you today, Vishal?\n"
     ]
    }
   ],
   "source": [
    "#3-2 Greetings\n",
    "message = \"How are you today, \"\n",
    "message_1= \"?\"\n",
    "print(message+names[0]+message_1)\n",
    "print(message+names[1]+message_1)\n",
    "print(message+names[2]+message_1)\n",
    "print(message+names[3]+message_1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#3-3 Transportation (not done) same as above"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['honda', 'yamaha', 'suzuki']\n"
     ]
    }
   ],
   "source": [
    "#Practise \n",
    "motorcycles=['honda', 'yamaha', 'suzuki']\n",
    "print(motorcycles)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "can't assign to function call (<ipython-input-5-614e30168c81>, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-5-614e30168c81>\"\u001b[1;36m, line \u001b[1;32m1\u001b[0m\n\u001b[1;33m    motorcycles(0)='ducati'\u001b[0m\n\u001b[1;37m                           ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m can't assign to function call\n"
     ]
    }
   ],
   "source": [
    "motorcycles(0)='ducati'\n",
    "print(motorcycles)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['ducati', 'yamaha', 'suzuki']\n"
     ]
    }
   ],
   "source": [
    "motorcycles[0]='ducati'\n",
    "print(motorcycles)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['honda', 'yamaha', 'suzuki', 'ducati']\n"
     ]
    }
   ],
   "source": [
    "motorcycles=['honda', 'yamaha', 'suzuki']\n",
    "motorcycles.append('ducati')\n",
    "print(motorcycles)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['mazda', 'honda', 'yamaha', 'suzuki', 'ducati']\n"
     ]
    }
   ],
   "source": [
    "motorcycles.insert(0, 'mazda')\n",
    "print(motorcycles)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['honda', 'yamaha', 'suzuki', 'ducati']\n"
     ]
    }
   ],
   "source": [
    "del motorcycles[0]\n",
    "print(motorcycles)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['honda', 'suzuki', 'ducati']\n"
     ]
    }
   ],
   "source": [
    "del motorcycles[1]\n",
    "print(motorcycles)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['honda', 'yamaha', 'suzuki']\n",
      "['honda', 'yamaha']\n",
      "suzuki\n"
     ]
    }
   ],
   "source": [
    "motorcycles=['honda','yamaha','suzuki']\n",
    "print(motorcycles)\n",
    "\n",
    "popped_motorcycle=motorcycles.pop()\n",
    "print(motorcycles)\n",
    "print(popped_motorcycle)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The last motorcycles I owned was a Suzuki.\n"
     ]
    }
   ],
   "source": [
    "motorcycles=['honda','yamaha','suzuki']\n",
    "last_owned=motorcycles.pop()\n",
    "print(\"The last motorcycles I owned was a \"+last_owned.title()+\".\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The first motorcylce I owned was a honda.\n"
     ]
    }
   ],
   "source": [
    "motorcycles=['honda','yamaha','suzuki']\n",
    "first_owned=motorcycles.pop(0)\n",
    "print(\"The first motorcylce I owned was a \"+first_owned+\".\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['honda', 'yamaha', 'suzuki', 'ducati']\n",
      "['honda', 'yamaha', 'suzuki']\n"
     ]
    }
   ],
   "source": [
    "motorcycles=['honda','yamaha','suzuki','ducati']\n",
    "print(motorcycles)\n",
    "motorcycles.remove('ducati')\n",
    "print(motorcycles)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "A Suzukiis too expensive for me.\n"
     ]
    }
   ],
   "source": [
    "too_expensive ='suzuki'\n",
    "motorcycles.remove(too_expensive)\n",
    "print(\"\\nA \"+too_expensive.title()+\"is too expensive for me.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Would you like to attend dinnner today, Janvi?\n",
      "Would you like to attend dinnner today, Vandana?\n",
      "Would you like to attend dinnner today, Shreya?\n"
     ]
    }
   ],
   "source": [
    "#Exercise 3-4\n",
    "dinner = ['Janvi', 'Vandana', 'Shreya']\n",
    "message=\"Would you like to attend dinnner today, \"\n",
    "message_2=\"?\"\n",
    "print(message+dinner[0]+message_2)\n",
    "print(message+dinner[1]+message_2)\n",
    "print(message+dinner[2]+message_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Janvi', 'Vandana', 'Shreya']\n",
      "['Janvi', 'Vandana']\n",
      "Shreya can't make it to dinner tonight.\n"
     ]
    }
   ],
   "source": [
    "dinner = ['Janvi', 'Vandana', 'Shreya']\n",
    "print(dinner)\n",
    "notattending_dinner=dinner.pop()\n",
    "print(dinner)\n",
    "print(notattending_dinner+\" can't make it to dinner tonight.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Janvi', 'Vandana', 'Chelsea']\n"
     ]
    }
   ],
   "source": [
    "dinner.append('Chelsea')\n",
    "print(dinner)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Would you like to attend dinnner today, Janvi?\n",
      "Would you like to attend dinnner today, Vandana?\n",
      "Would you like to attend dinnner today, Chelsea?\n"
     ]
    }
   ],
   "source": [
    "print(message+dinner[0]+message_2)\n",
    "print(message+dinner[1]+message_2)\n",
    "print(message+dinner[2]+message_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "I found a bigger table to accomodate us\n"
     ]
    }
   ],
   "source": [
    "print(\"I found a bigger table to accomodate us\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Janvi', 'Vandana', 'Chelsea']\n",
      "['Pooja', 'Janvi', 'Shreya', 'Vandana', 'Chelsea', 'Analisa']\n"
     ]
    }
   ],
   "source": [
    "dinner=['Janvi','Vandana', 'Chelsea']\n",
    "print(dinner)\n",
    "dinner.insert(0, 'Pooja')\n",
    "dinner.insert(2, 'Shreya')\n",
    "dinner.append('Analisa')\n",
    "print(dinner)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "I'm sorry, I can only invite two people for dinner since we won't have a big table\n"
     ]
    }
   ],
   "source": [
    "#Exercise 3-7\n",
    "print(\"I'm sorry, I can only invite two people for dinner since we won't have a big table\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "I'm sorry that I can't invite you to dinner, Analisa.\n",
      "['Pooja', 'Janvi', 'Shreya', 'Vandana', 'Chelsea']\n",
      "I'm sorry that I can't invite you to dinner, Chelsea.\n",
      "['Pooja', 'Janvi', 'Shreya', 'Vandana']\n",
      "I'm sorry that I can't invite you to dinner, Vandana.\n",
      "['Pooja', 'Janvi', 'Shreya']\n",
      "I'm sorry that I can't invite you to dinner, Shreya.\n",
      "['Pooja', 'Janvi']\n"
     ]
    }
   ],
   "source": [
    "removed_1=dinner.pop()\n",
    "print(\"I'm sorry that I can't invite you to dinner, \"+removed_1+\".\")\n",
    "print(dinner)\n",
    "removed_2=dinner.pop()\n",
    "print(\"I'm sorry that I can't invite you to dinner, \"+removed_2+\".\")\n",
    "print(dinner)\n",
    "removed_3=dinner.pop()\n",
    "print(\"I'm sorry that I can't invite you to dinner, \"+removed_3+\".\")\n",
    "print(dinner)\n",
    "removed_4=dinner.pop()\n",
    "print(\"I'm sorry that I can't invite you to dinner, \"+removed_4+\".\")\n",
    "print(dinner)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "You are still invited, Pooja.\n",
      "You are still invited, Janvi.\n"
     ]
    }
   ],
   "source": [
    "print(\"You are still invited, \"+dinner[0]+\".\")\n",
    "print(\"You are still invited, \"+dinner[1]+\".\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Janvi']\n",
      "[]\n"
     ]
    }
   ],
   "source": [
    "del dinner[0]\n",
    "print(dinner)\n",
    "del dinner[0]\n",
    "print(dinner)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['bmw', 'audi', 'toyota', 'subaru']\n",
      "['audi', 'bmw', 'subaru', 'toyota']\n"
     ]
    }
   ],
   "source": [
    "#Organising lists practise\n",
    "\n",
    "cars=['bmw', 'audi', 'toyota', 'subaru']\n",
    "print(cars)\n",
    "cars.sort()\n",
    "print(cars)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "must be str, not list",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-34-f0dee5e86b6b>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[0mcars\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'bmw'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'audi'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'toyota'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'subaru'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 3\u001b[1;33m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"The original list: \"\u001b[0m\u001b[1;33m+\u001b[0m\u001b[0mcars\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      4\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[0mcars\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msorted\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mTypeError\u001b[0m: must be str, not list"
     ]
    }
   ],
   "source": [
    "cars=['bmw', 'audi', 'toyota', 'subaru']\n",
    "\n",
    "print(\"The original list: \"+cars)\n",
    "\n",
    "cars.sorted()\n",
    "print(\"The sorted list: \"+cars)\n",
    "\n",
    "print(\"The original list again: \"+cars)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The original list: \n",
      "['bmw', 'audi', 'toyota', 'subaru']\n",
      "The sorted list: \n",
      "['audi', 'bmw', 'subaru', 'toyota']\n",
      "The original list again: \n",
      "['bmw', 'audi', 'toyota', 'subaru']\n"
     ]
    }
   ],
   "source": [
    "cars=['bmw', 'audi', 'toyota', 'subaru']\n",
    "\n",
    "print(\"The original list: \")\n",
    "print(cars)\n",
    "\n",
    "print(\"The sorted list: \")\n",
    "print(sorted(cars))\n",
    "\n",
    "print(\"The original list again: \")\n",
    "print(cars)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'true' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-36-f838f31c5eeb>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mcars\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msort\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mreverse\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mtrue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mcars\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'true' is not defined"
     ]
    }
   ],
   "source": [
    "cars.sort(reverse=true)\n",
    "print(cars)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['toyota', 'subaru', 'bmw', 'audi']\n"
     ]
    }
   ],
   "source": [
    "cars.sort(reverse=True)\n",
    "print(cars)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(cars)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['italy', 'paris', 'iceland', 'australia', 'japan']\n",
      "['italy', 'paris', 'iceland', 'australia', 'japan']\n"
     ]
    }
   ],
   "source": [
    "#Exercise 3-8\n",
    "\n",
    "places=['italy', 'paris', 'iceland', 'australia', 'japan']\n",
    "print(places)\n",
    "\n",
    "sorted(places)\n",
    "print(places)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This is the original list: \n",
      "['italy', 'paris', 'iceland', 'australia', 'japan']\n",
      "This is the sorted list: \n",
      "['australia', 'iceland', 'italy', 'japan', 'paris']\n",
      "This is the original list again: \n",
      "['italy', 'paris', 'iceland', 'australia', 'japan']\n"
     ]
    }
   ],
   "source": [
    "places=['italy', 'paris', 'iceland', 'australia', 'japan']\n",
    "\n",
    "print(\"This is the original list: \")\n",
    "print(places)\n",
    "\n",
    "print(\"This is the sorted list: \")\n",
    "print(sorted(places))\n",
    "\n",
    "print(\"This is the original list again: \")\n",
    "print(places)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This is the original list: \n",
      "['italy', 'paris', 'iceland', 'australia', 'japan']\n",
      "This is the sorted list in reverse order: \n",
      "['australia', 'iceland', 'italy', 'japan', 'paris']\n",
      "['japan', 'australia', 'iceland', 'paris', 'italy']\n"
     ]
    }
   ],
   "source": [
    "print(\"This is the original list: \")\n",
    "print(places)\n",
    "\n",
    "print(\"This is the sorted list in reverse order: \")\n",
    "print(sorted(places))\n",
    "places.reverse()\n",
    "print(places)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
